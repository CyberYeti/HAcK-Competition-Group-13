{"ast":null,"code":"var _jsxFileName = \"/Users/roncohen/Documents/Project V2/HAcK-Competition-Group-13/HaCK_Starter_Code/frontend/src/ChatGPTDecoder.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatGPTDecoder() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const handleAsk = async () => {\n    console.log(\"Prompt sent:\", input); // üîç Debug\n\n    try {\n      const res = await fetch(\"http://localhost:8000/api/chatgpt\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: input\n        })\n      });\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.error || \"Failed to get response\");\n      }\n      const data = await res.json();\n      console.log(\"GPT Response:\", data); // üîç Debug\n\n      setResponse(data.response);\n\n      // Optional speech\n      if (data.response) {\n        const msg = new SpeechSynthesisUtterance(data.response);\n        window.speechSynthesis.speak(msg);\n      }\n    } catch (err) {\n      console.error(\"Fetch or GPT error:\", err.message);\n      setResponse(\"‚ùå Error: \" + err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"1rem\",\n      border: \"1px solid gray\",\n      marginTop: \"1rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDCAC ChatGPT Decoder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"4\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Type a clue to decode...\",\n      style: {\n        width: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAsk,\n      children: \"Ask ChatGPT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"1rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Response:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatGPTDecoder, \"OuQdeN0dAF6xlFxhRB6RgT+UwP8=\");\n_c = ChatGPTDecoder;\nvar _c;\n$RefreshReg$(_c, \"ChatGPTDecoder\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","ChatGPTDecoder","_s","input","setInput","response","setResponse","handleAsk","console","log","res","fetch","method","headers","body","JSON","stringify","prompt","ok","errorData","json","Error","error","data","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","err","message","style","padding","border","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","rows","value","onChange","e","target","placeholder","width","onClick","_c","$RefreshReg$"],"sources":["/Users/roncohen/Documents/Project V2/HAcK-Competition-Group-13/HaCK_Starter_Code/frontend/src/ChatGPTDecoder.js"],"sourcesContent":["import { useState } from \"react\";\n\nexport default function ChatGPTDecoder() {\n  const [input, setInput] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n\n  const handleAsk = async () => {\n    console.log(\"Prompt sent:\", input); // üîç Debug\n\n    try {\n      const res = await fetch(\"http://localhost:8000/api/chatgpt\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ prompt: input }),\n      });\n\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.error || \"Failed to get response\");\n      }\n\n      const data = await res.json();\n      console.log(\"GPT Response:\", data); // üîç Debug\n\n      setResponse(data.response);\n\n      // Optional speech\n      if (data.response) {\n        const msg = new SpeechSynthesisUtterance(data.response);\n        window.speechSynthesis.speak(msg);\n      }\n    } catch (err) {\n      console.error(\"Fetch or GPT error:\", err.message);\n      setResponse(\"‚ùå Error: \" + err.message);\n    }\n  };\n\n  return (\n    <div\n      style={{ padding: \"1rem\", border: \"1px solid gray\", marginTop: \"1rem\" }}\n    >\n      <h2>üí¨ ChatGPT Decoder</h2>\n      <textarea\n        rows=\"4\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        placeholder=\"Type a clue to decode...\"\n        style={{ width: \"100%\" }}\n      />\n      <br />\n      <button onClick={handleAsk}>Ask ChatGPT</button>\n      <div style={{ marginTop: \"1rem\" }}>\n        <strong>Response:</strong>\n        <p>{response}</p>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}